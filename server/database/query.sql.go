// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"
)

const createLink = `-- name: CreateLink :one
INSERT INTO urls (
  long_url, short_url
) VALUES (
  $1, $2
)
RETURNING id, long_url, short_url
`

type CreateLinkParams struct {
	LongUrl  string
	ShortUrl string
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Url, error) {
	row := q.db.QueryRow(ctx, createLink, arg.LongUrl, arg.ShortUrl)
	var i Url
	err := row.Scan(&i.ID, &i.LongUrl, &i.ShortUrl)
	return i, err
}

const deleteAllLinks = `-- name: DeleteAllLinks :exec
DELETE FROM urls
`

func (q *Queries) DeleteAllLinks(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllLinks)
	return err
}

const deleteLink = `-- name: DeleteLink :exec
DELETE FROM urls
WHERE short_url = $1
`

func (q *Queries) DeleteLink(ctx context.Context, shortUrl string) error {
	_, err := q.db.Exec(ctx, deleteLink, shortUrl)
	return err
}

const getLink = `-- name: GetLink :one
SELECT id, long_url, short_url FROM urls
WHERE long_url = $1 LIMIT 1
`

func (q *Queries) GetLink(ctx context.Context, longUrl string) (Url, error) {
	row := q.db.QueryRow(ctx, getLink, longUrl)
	var i Url
	err := row.Scan(&i.ID, &i.LongUrl, &i.ShortUrl)
	return i, err
}

const listLinks = `-- name: ListLinks :many
SELECT id, long_url, short_url FROM urls
ORDER BY long_url
`

func (q *Queries) ListLinks(ctx context.Context) ([]Url, error) {
	rows, err := q.db.Query(ctx, listLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(&i.ID, &i.LongUrl, &i.ShortUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
